# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#
# Copyright (C) 2019 P3TERX
#
# Copyright (C) 2020 KFERMercer
#
name: OpenWrt-CI

on:
  push:
    branches: 
      - master
  # schedule:
  #   - cron: 0 20 * * *
  release:
    types: [published]

jobs:

  build_openwrt:

    name: Build OpenWrt firmware

    runs-on: ubuntu-latest
    
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
      - name: 空间清理和初始化环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi `docker images -q`
          sudo -E rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/apt/sources.list.d /usr/local/lib/android
          sudo -E apt-mark hold grub-efi-amd64-signed
          sudo -E apt update
          sudo -E apt -y purge azure-cli* docker* ghc* zulu* llvm* firefox google* dotnet* powershell* openjdk* mysql* php* mongodb* dotnet* snap*
          sudo -E apt -y full-upgrade
          sudo -E apt -y install ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev
          sudo -E systemctl daemon-reload
          sudo -E apt -y autoremove --purge
          sudo -E apt clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"

      - name: 校验 OpenWrt
        uses: actions/checkout@v3
        with:
          ref: master

      - name: 更新仓库
        run: |
          sed -i 's/#src-git helloworld/src-git helloworld/g' ./feeds.conf.default
          sed -i '1i src-git kenzo https://github.com/kenzok8/openwrt-packages' feeds.conf.default
          sed -i '2i src-git small https://github.com/kenzok8/small' feeds.conf.default
          git pull
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          
      - name: 生成配置文件
        run: |
          rm -f ./.config*
          touch ./.config

          #
          # 在 cat >> .config <<EOF 到 EOF 之间粘贴你的编译配置, 需注意缩进关系
          # 例如:
          # Target Config
          cat >> .config <<EOF
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          CONFIG_TARGET_ROOTFS_TARGZ=y
          CONFIG_TARGET_ROOTFS_SQUASHFS=y
          CONFIG_TARGET_ROOTFS_EXT4FS=y
          CONFIG_TARGET_EXT4_JOURNAL=y
          CONFIG_TARGET_KERNEL_PARTSIZE=50
          CONFIG_TARGET_ROOTFS_PARTSIZE=900
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_GRUB_IMAGES=y
          CONFIG_GRUB_EFI_IMAGES=y
          CONFIG_VDI_IMAGES=y
          CONFIG_VMDK_IMAGES=y
          CONFIG_GRUB_TIMEOUT="0"
          CONFIG_LINUX_5_10=y
          CONFIG_TESTING_KERNEL=y
          EOF
         
          # Extra Packages
          cat >> .config <<EOF
          CONFIG_PACKAGE_autocore-x86=y
          EOF

          # 主题
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-theme-argon=y
          EOF

          # Luci
          cat >> .config <<EOF
          CONFIG_PACKAGE_luci-app-adbyby-plus=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Client=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Libev_Server=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Client=n
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_Rust_Server=n
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Client=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Libev_Server=y
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust_Client=n
          CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks_Rust_Server=n
          EOF

          # QEMU
          cat >> .config <<EOF
          CONFIG_PACKAGE_qemu-arm-softmmu=y
          CONFIG_PACKAGE_qemu-bridge-helper=y
          CONFIG_PACKAGE_qemu-firmware-efi=y
          CONFIG_PACKAGE_qemu-firmware-pxe=y
          CONFIG_PACKAGE_qemu-firmware-seabios=y
          CONFIG_PACKAGE_qemu-firmware-seavgabios=y
          CONFIG_PACKAGE_qemu-ga=y
          CONFIG_PACKAGE_qemu-img=y
          CONFIG_PACKAGE_qemu-keymaps=y
          CONFIG_PACKAGE_qemu-nbd=y
          CONFIG_PACKAGE_qemu-x86_64-softmmu=y
          CONFIG_PACKAGE_virtio-console-helper=y
          CONFIG_QEMU_DEV_USB=y
          CONFIG_QEMU_UI_SPICE=y
          CONFIG_QEMU_UI_VNC=y
          CONFIG_QEMU_UI_VNC_JPEG=y
          EOF

          # System Utilities
          cat >> .config <<EOF
          CONFIG_PACKAGE_acl=y
          CONFIG_PACKAGE_btrfs-progs=y
          CONFIG_PACKAGE_e2fsprogs=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_mkf2fs=y
          CONFIG_PACKAGE_nfs-utils-libs=y
          CONFIG_PACKAGE_pciutils=y
          CONFIG_PACKAGE_squashfs-tools-mksquashfs=y
          CONFIG_PACKAGE_squashfs-tools-unsquashfs=y
          CONFIG_PACKAGE_swap-utils=y
          CONFIG_PACKAGE_sysfsutils=y
          CONFIG_SQUASHFS_TOOLS_LZ4_SUPPORT=y
          CONFIG_SQUASHFS_TOOLS_LZO_SUPPORT=y
          CONFIG_SQUASHFS_TOOLS_XZ_SUPPORT=y
          EOF
          
          #
          # ===============================================================
          # 

          sed -i 's/^[ \t]*//g' ./.config
          make defconfig
           
      - name: 开始下载
        run: |
          make download -j16 || make download -j1 V=s
          rm -rf $(find ./dl/ -size -1024c)
          df -h
          
      - name: 编译固件
        run: |
          make -j$(nproc) || make -j1 V=s
          echo "======================="
          echo "Space usage:"
          echo "======================="
          df -h
          echo "======================="
          du -h --max-depth=1 ./ --exclude=build_dir --exclude=bin
          du -h --max-depth=1 ./build_dir
          du -h --max-depth=1 ./bin

      - name: 准备工作
        run: |
          mkdir -p ./artifact/firmware
          mkdir -p ./artifact/package
          mkdir -p ./artifact/buildinfo
          rm -rf $(find ./bin/targets/ -type d -name "packages")
          cp -rf $(find ./bin/targets/ -type f) ./artifact/firmware/
          cp -rf $(find ./bin/packages/ -type f -name "*.ipk") ./artifact/package/
          cp -rf $(find ./bin/targets/ -type f -name "*.buildinfo" -o -name "*.manifest") ./artifact/buildinfo/

      - name: 上传构建信息
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_buildinfo
          path: ./artifact/buildinfo/

      - name: 上传软件包
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_package
          path: ./artifact/package/

      - name: 上传固件
        uses: actions/upload-artifact@v3
        with:
          name: OpenWrt_firmware
          path: ./bin/targets/

      - name: 上传至release asset
        if: github.event == 'release'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.YOURTOKEN }}
          file: ./artifact/firmware/*
          tag: ${{ github.ref }}
          file_glob: true
